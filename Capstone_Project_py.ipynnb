{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP2AF0wfHCSDBRycfz+qOTR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NandiniNagothu/Basic-ML/blob/main/Capstone_Project_py.ipynnb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3UPIlsUoYpU5"
      },
      "source": [
        "**EDA(EXPLORATORY DATA ANALYSIS)**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HKkwXe8VZCks"
      },
      "source": [
        "**INTRODUCTION**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Em1y7SqcZKiS"
      },
      "source": [
        "In this notebook i have predicted the survival of Titanic passengers using the following steps:\n",
        "\n",
        "* Exploratory data analysis.\n",
        "\n",
        "* Data cleaning\n",
        "\n",
        "* splitting the data with 80-20%\n",
        "\n",
        "* 3 Machine Learning Models namely:\n",
        "   * LogisticRegression\n",
        "   * RandomForest\n",
        "   * DecissionTree\n",
        "\n",
        "* Documentation \n",
        "  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vPaUQ2v_bBYM"
      },
      "source": [
        "**STEP-1: Performing EDA(Exploratory data analysis)**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rPheIbqstohX"
      },
      "source": [
        "**EDA** mainly focus on analysing or exploring the data manually or in the form of pictorial representation to know well about it before working on it"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XeDvC12Kt_d7"
      },
      "source": [
        "To do this we need to import some libraries for data manipulation along with data visualization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hTQ0M8s-cHrb"
      },
      "source": [
        "**IMPORTING LIBRARIES**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FcPLIKZxcMwO"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q3GmXPV1c_D6"
      },
      "source": [
        "**PRELIMINARY DATA ANALYSIS**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_TwXga8TdGah"
      },
      "source": [
        "To start off,we read our dataset and generate a simple preview and statistics of our data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DilE8grKdao0"
      },
      "source": [
        "**LOADING DATA**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "oe-DsA6JdhKP",
        "outputId": "7a26bf82-1b3a-4c2d-9647-0ffb46bda312"
      },
      "source": [
        "data=pd.read_csv(\"train.csv\")\n",
        "data"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0              1         0       3  ...   7.2500   NaN         S\n",
              "1              2         1       1  ...  71.2833   C85         C\n",
              "2              3         1       3  ...   7.9250   NaN         S\n",
              "3              4         1       1  ...  53.1000  C123         S\n",
              "4              5         0       3  ...   8.0500   NaN         S\n",
              "..           ...       ...     ...  ...      ...   ...       ...\n",
              "886          887         0       2  ...  13.0000   NaN         S\n",
              "887          888         1       1  ...  30.0000   B42         S\n",
              "888          889         0       3  ...  23.4500   NaN         S\n",
              "889          890         1       1  ...  30.0000  C148         C\n",
              "890          891         0       3  ...   7.7500   NaN         Q\n",
              "\n",
              "[891 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "65TiE6Hrd2bZ"
      },
      "source": [
        "pandas provide a method called read_csv() to load the data set.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sa9aXZjVfpTl"
      },
      "source": [
        "**UNDERSTANDING THE DATA**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eFjXBI_yeBrH",
        "outputId": "035b7c55-d9a8-4cf1-f86e-abc0e947f572"
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RA4L5qBveaFI"
      },
      "source": [
        "pandas library provides a member called shape which returns the dimensions(i.e, no of rows and columns) of our dataset.\n",
        "\n",
        "the present dataset contains 891 entries with 12 columns."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "1lZlQHv_fLb8",
        "outputId": "23fdd021-e64a-452e-f2b4-8de33c78e0bc"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gpJIACq0fSos"
      },
      "source": [
        "head() method in pandas returns the first five rows of the dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "L3owmpZFfvr8",
        "outputId": "b1e5f457-854f-4f31-9d7b-80e37c598578"
      },
      "source": [
        "data.tail()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.00</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.00</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...   Fare Cabin  Embarked\n",
              "886          887         0       2  ...  13.00   NaN         S\n",
              "887          888         1       1  ...  30.00   B42         S\n",
              "888          889         0       3  ...  23.45   NaN         S\n",
              "889          890         1       1  ...  30.00  C148         C\n",
              "890          891         0       3  ...   7.75   NaN         Q\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F2eEjsu_f0GP"
      },
      "source": [
        "tail() method returns the last five rows of our dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fkGK3UGYf_eV",
        "outputId": "8fa81fdc-9845-44e8-f8dd-169813e63511"
      },
      "source": [
        "data.columns"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
              "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dFQNfRRTgIZh"
      },
      "source": [
        "in order to understand the data, initially we need to know what are the columns present in our dataset.\n",
        "\n",
        "in order to know the feautures(columns), pandas library provides a member called columns which returns the names of the columns present in our dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "MZ8uAfLigmlm",
        "outputId": "81c72d6a-d8c2-412b-82e2-9a26efdb5327"
      },
      "source": [
        "data.describe()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n",
              "count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n",
              "mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n",
              "std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n",
              "min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n",
              "50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n",
              "75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n",
              "max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7MyFzQdBg86F"
      },
      "source": [
        "This method generates a high level summary of attributes over each column of the data set.More probably it provides the statistical insights of the dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jCRm07HwhXrE",
        "outputId": "5f5b4711-b157-4efc-f27d-4da6c1b18e2a"
      },
      "source": [
        "data.info()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8NPVe3-Uhi5V"
      },
      "source": [
        "info() method provides more information of our dataset.from the above observation it is clear that our dataset contains some null values."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r9JsWFhWiUZ3"
      },
      "source": [
        "**CHECKING WHETHER THE DATASET CONTAINS NULL VALUES OR NOT**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w77DylMtim5S",
        "outputId": "84396aa5-5483-4422-c606-937993dfd54f"
      },
      "source": [
        "data.isnull().sum()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ODbXRM5ji4PX"
      },
      "source": [
        "isnull().sum() returns the number of null values are present in our dataset.\n",
        "\n",
        "from the above observation it is clear that our dataset contains some null values.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "96xtoWkzjcGo"
      },
      "source": [
        "**DATA VISUALIZATION**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VqzDUM7TkDes"
      },
      "source": [
        "**COUNT PLOT**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "GLRZzdS1kJDN",
        "outputId": "8a6e4782-c306-4889-81a0-9542c2d690a2"
      },
      "source": [
        "plot=sns.countplot(x=\"Sex\",hue=\"Survived\",data=data)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5JzpBzkYlfpH"
      },
      "source": [
        "from the above visualization we can observe that our dataset is unbalanced dataset.\n",
        "\n",
        "from the above observation we can understand that the survival rate of women is more than men."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Asck1LMcnYlB"
      },
      "source": [
        "**CORRELATION BETWEEN VARIABLES**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "nYVplk9cnkYz",
        "outputId": "f0843adb-66b9-4170-be6c-7b565cb3f67b"
      },
      "source": [
        "data.corr()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.012658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>-0.005007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.257307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>-0.035144</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.549500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.096067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>0.159651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.216225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0.012658</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>0.096067</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             PassengerId  Survived    Pclass  ...     SibSp     Parch      Fare\n",
              "PassengerId     1.000000 -0.005007 -0.035144  ... -0.057527 -0.001652  0.012658\n",
              "Survived       -0.005007  1.000000 -0.338481  ... -0.035322  0.081629  0.257307\n",
              "Pclass         -0.035144 -0.338481  1.000000  ...  0.083081  0.018443 -0.549500\n",
              "Age             0.036847 -0.077221 -0.369226  ... -0.308247 -0.189119  0.096067\n",
              "SibSp          -0.057527 -0.035322  0.083081  ...  1.000000  0.414838  0.159651\n",
              "Parch          -0.001652  0.081629  0.018443  ...  0.414838  1.000000  0.216225\n",
              "Fare            0.012658  0.257307 -0.549500  ...  0.159651  0.216225  1.000000\n",
              "\n",
              "[7 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bYbwicZdnqul"
      },
      "source": [
        "**visualizing the correlation using a HEAT MAP**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 884
        },
        "id": "IvNlrwYdn1zz",
        "outputId": "eb502883-63cf-4cac-f5fb-2b43071cbcb7"
      },
      "source": [
        "fig=plt.figure(figsize=(15,15))\n",
        "sns.heatmap(data.corr(),cmap=\"Reds\",annot=True)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcab1c39fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x1080 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oUObtyJ8qf0U"
      },
      "source": [
        "**VIOLIN PLOT**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "7RwVKUZTqk-1",
        "outputId": "c3a59924-25dc-43a5-c5fb-15bd46054a4e"
      },
      "source": [
        "sns.violinplot(x=\"Sex\",y=\"Age\",hue=\"Survived\",data=data,split=True)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcaa9010690>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dZ3hU1fr38e+aTHonoQQSSOiC9GLFg6DYENSjonIULCDYFT0gegQFLIgIInawPxTLEUQFAaUcQDT0XkMJBAikkDZ9PS8S/Cs1wEz2zOz7c11cMm3vX2Tmzpq1V1Faa4QQQpiHxegAQgghqpYUfiGEMBkp/EIIYTJS+IUQwmSk8AshhMlYjQ5QGcnJyTo9Pd3oGEIIEVBWrFhxWGtd/fj7A6Lwp6enk5mZaXQMIYQIKEqp3Se7X7p6hBDCZKTwCyGEyUjhF0IIkwmIPn4hhPA2p9NJdnY2NpvN6CjnLSIigtTUVEJDQyv1fCn8QghTys7OJjY2lvT0dJRSRsc5Z1prjhw5QnZ2NhkZGZV6jXT1CCFMyWazkZSUFNBFH0ApRVJS0ll9c5HCL4QwrUAv+sec7c8hhd+EZCluIcxNCr/JvPHGG/Tt08foGEL4pVGjRtG8eXNatmxJ69atWb58+Xkfc+bMmbz66qteSAcxMTFeOY5c3DWZ77//3ugIQvilZcuWMWvWLFauXEl4eDiHDx/G4XBU6rUulwur9eTltEePHvTo0cObUc+btPhNyu12Gx1BCL+Sk5NDcnIy4eHhACQnJ1O7dm3S09M5fPgwAJmZmXTu3BmA4cOHc/fdd3PZZZdx9913c/HFF7Nhw4Y/j9e5c2cyMzP55JNPeOSRRygsLKRevXp4PB4ASkpKSEtLw+l0smPHDq699lratWtHp06d2Lx5MwBZWVlccskltGjRgueff95rP6sUfpOy2+1GRxDCr3Tr1o29e/fSuHFjHnroIRYuXHjG12zcuJF58+YxZcoUevXqxfTp04HyXyI5OTm0b9/+z+fGx8fTunXrP487a9YsrrnmGkJDQ+nfvz8TJkxgxYoVjBkzhoceegiAxx9/nIEDB7Ju3TpSUlK89rNK4TepYJi0IoQ3xcTEsGLFCj744AOqV69Or169+OSTT077mh49ehAZGQnA7bffztdffw3A9OnTufXWW094fq9evZg2bRoAU6dOpVevXhQXF7N06VJuu+02WrduzYMPPkhOTg4AS5Ys4c477wTg7rvv9taPKn38ZiWFX4gThYSE0LlzZzp37kyLFi349NNPsVqtf3bPHP+5iY6O/vPvderUISkpibVr1zJt2jTee++9E47fo0cPhg4dSl5eHitWrKBLly6UlJSQkJDA6tWrT5rJF0NOpcVvUqWlpUZHEMKvbNmyhW3btv15e/Xq1dSrV4/09HRWrFgBwDfffHPaY/Tq1YvRo0dTWFhIy5YtT3g8JiaGDh068Pjjj9O9e3dCQkKIi4sjIyODr776Cigfbr1mzRoALrvsMqZOnQrAl19+6ZWfE6Twm5YUfiH+rri4mD59+tCsWTNatmzJxo0bGT58OMOGDePxxx+nffv2hISEnPYYt956K1OnTuX2228/5XN69erFF198Qa9evf6878svv2TSpEm0atWK5s2bM2PGDADGjx/PxIkTadGiBfv27fPODwqoQJjM0759ey0bsXjHDTfcQElJCa+88gqXXHKJ0XGEMMymTZu44IILjI7hNSf7eZRSK7TW7Y9/rrT4TeZYn6S0+IUwLyn8JnOs8BcXFxucRAhhFCn8JnNsyrcUfiHMSwq/yRyblSiFXwjzksJvUlL4hTAvKfwmVVRUZHQEIYRBZOauSUmLX4gze+SpZzh0OM9rx6uRXI23x75+2ufMnj2bxx9/HLfbzQMPPMCQIUO8dv5jpPCbVFHRUaMjCOH3Dh3OY0fNf3jvgAdPv/Cb2+3m4YcfZu7cuaSmptKhQwd69OhBs2bNvJcB6eoxrRJp8Qvhd37//XcaNmxI/fr1CQsL44477vhzFq83SeE3qZISKfxC+Jt9+/aRlpb25+3U1FSvLtVwjBR+kzm2AUtZmazOKYRZSeE3mQ0bNgJgszv+XGpWCOEf6tSpw969e/+8nZ2dTZ06dbx+Hin8JuNw2P/y98rtJyqEqBodOnRg27ZtZGVl4XA4mDp1qk/26/XpqB6l1JPAA4AG1gH3AinAVCAJWAHcrbWWCmQAu91ORESE0TGE8Fs1kqudcSTOWR/vNKxWK2+//TbXXHMNbreb++67j+bNm3vt/H+ex+tHrKCUqgM8BjTTWpcppaYDdwDXA29qracqpd4D7gfe9VUO8X+O32Dd5XIZlESIwHCmMfe+cP3113P99df79By+7uqxApFKKSsQBeQAXYCvKx7/FLjJxxlEhaNH/z52X7p6hDAnnxV+rfU+YAywh/KCX0h5106B1vpYUzMbOOmVC6VUf6VUplIqMzc311cxTSUv7+8zEOXirhDm5LPCr5RKBHoCGUBtIBq4trKv11p/oLVur7VuX716dR+lNJeDBw/+7bYUfiHMyZddPVcBWVrrXK21E/gWuAxIqOj6AUgFvD87QZzUgQMH/nY7ELbdFEJ4ny8L/x7gYqVUlFJKAV2BjcCvwK0Vz+kDeH8+sjipPXv2GB1BCOEHfNnHv5zyi7grKR/KaQE+AAYDTymltlM+pHOSrzKIv9uxY8ffblssMo1DCDPy6Th+rfUwYNhxd+8EOvryvOJEHo+Hbdu2Gx1DiIAydNAjFB4+eOYnVlJ8ck1efuPt0z7nvvvuY9asWdSoUYP169d77dx/Jcsym8SuXbuw2cr+dl9ISIhBaYQIDIWHDzK4wWavHe+1HWd+Tt++fXnkkUe45557vHbe48l3fZNYt24dAFr9X7Evv/QihPAnV1xxBdWqnX6G7/mSwm8SK1euRIXHoC3/9yVP+viFMCf55JuA2+0mc8VKHDG1/na/tPiFMCcp/CawZcsWSoqLcMWnGh1FCOEHpPCbwPLly0EpXPG1/3a/TOASwpxkVI8JLFmyFE90dbD+fQnm41frFEL8XXxyzUqNxDmb453JnXfeyYIFCzh8+DCpqam8+OKL3H///d4LgRT+oJebm8v27dtwprY74TFZlln4k6ysLJ4dMpg77+pNz549jY4DcMYx974wZcoUn59DunqC3G+//QaAK6HuCY/Z7fYT7hPCKHv27OHAwUNMnz7d6ChBTwp/kFu6dBlExOGJSDjhsbKyspO8Qghj5eTkGB0h6EnhD2J2u53MFZk44urAX4ZuWlT5Rd3i4mKjoglxSh6Pp8qWDA+WAQ5n+3NI4Q9iq1evxulw4EpI+9v90dbyN0lhYaERsYQ4o/379/v8HBERERw5ciTgi7/WmiNHjpzV/tlycTeILV++HBVixR3794lbCWEeipwWjhw5YlAyIU5v8+bNpKb6dt5Jamoq2dnZBMMOfxEREWf1/0sKf5DSWrN02TKcMbXA8vd/5rAQTVSoCoo3vAhOa9as4aqrrvLpOUJDQ8nIyPDpOfyVdPUEqezsbA7k5JzQzXNM9Ui3XEQTfuXYDnHVI9z8vvy3gO+C8WdS+IPUn8M4T7FMQ80IJ9l7dldlJCFO6//9v/8HQOtkBwcP5bJ9u+wf4StS+IPU0mXLICoRHR570sfrRLvZf+AgNputipMJcXLHBhu0S3ZgUfDLL78YnCh4SeEPQiUlJaxZswZH3Kkv9qRGu9Fas3PnzipMJsSZxYZpWlZzMGf2TzK73Eek8Aeh33//HY/bfcr+fYCMuPIP1ObN3ttdSIhzdfy6UVfWsZGXX8DixYsNShTcpPAHocWLF6PCInHH1DjhMeVxcdhmISncQ0IEbNy40YCEQvxdXl7e3263SnJSM0ozdeoUucjrA1L4g4zD4WDpsmXY49JAneSfV3uwuxVKQZM4O6tWrpAPljDc8RO2LAquSythy5atZGZmGpQqeEnhDzKZmZnYyspwVUs/43MvSHRyJC+fPXv2+D6YEKexd+/eE+7rlGInKRImTfpIGideJoU/yCxYsABlDccdm3LG57ao5gQqNmoRwkBZWVkn3BdqgZvqFbN58xYWLlxoQKrgJYU/iDidThb/7384EuqCJeSMz68e6aFOjIelS5ZUQTohTm3rtm0nvb9Tip3UGA/vv/uOLCPuRVL4g0hmZiZlpaU4E9Mr/Zp2yTbWrl1Lfn6+74IJcRoul4utW7fiCQk74TGLgt4Ni8g5eIhp06YZkC44SeEPIn9288TVPvOTK3Ss4cCjNYsWLfJhMiFOLSsrC7vNdvLBCEDzai46VLfzxeefV8mqnWYghT9I/NnNE59WqW6eY9Ki3aTFeJgz+ycfphPi1FatWlXxN3XK5/RuVIpFu3jzzbFyodcLpPAHidWrV1NaUoKzEqN5/kopuLxWGRs3bWbXrl0+ySbE6SxfvhwiE/62WdDxqkV4uDWjmD/+yGTevHlVmC44+bTwK6USlFJfK6U2K6U2KaUuUUpVU0rNVUptq/hvoi8zmMWiRYtQIaFn1c1zzGW17FgtMHPmTB8kE+LUSkpKWH2G5UWOuSrVRsN4N2+NH3fChC9xdnzd4h8PzNZaNwVaAZuAIcB8rXUjYH7FbXEePB4Pixf/r3yLRcvZb7EQF6bpUN3O7J9+pKSkxAcJhTi5JUuW4Ha5cCbWO+NzLQrub1pEWWkJ48a9KV0+58FnhV8pFQ9cAUwC0Fo7tNYFQE/g04qnfQrc5KsMZrFp0yYKCvJxVeLDcyrXpJVRWmZj1qxZXkwmxOnN+flnCI/Bc5LlRU6mTrSbWzJKWLRosazeeR582eLPAHKBj5VSq5RSHymlooGaWutjO4AcAGqe7MVKqf5KqUylVKbsFHV6S5cuBaVOufZ+ZdSPc3NBoouvpk/D4XB4MZ0QJ5eTk8PKFSuwJzU8bf/+8a5Ls9Eg3s24sWNlF7lz5MvCbwXaAu9qrdsAJRzXraPLv6ud9Pua1voDrXV7rXX76tWr+zBm4Fu0eHH5vrrW8PM6zo31Sjl8JI+ffpIRPsL3/vvf/6IBZ/UmZ/W6EAv0v+AodlsJr732qnT5nANfFv5sIFtrfWw9gK8p/0VwUCmVAlDx30M+zBD09u7dy949e3AmnHs3zzHNE500SnDx+WefyixJ4VOFhYXMmDkTZ2IGOiz6rF+fEuXhzgbFZGau4L///a8PEgY3nxV+rfUBYK9S6tiv867ARmAm0Kfivj7ADF9lMINja5icT//+MUrBbRklHD6Sx9dff33exxPiVKZNm4bdZsOR0uqcj9Gljp1WSU7ee/ddGYp8lnw9qudR4Eul1FqgNfAy8CpwtVJqG3BVxW1xjub/8guemBrn1Go6maaJLtokO/jyi89lyJzwiYMHD/LVV1/hTGqAJ+rcR3OrilE+4crJyBEvybWps+DTwq+1Xl3RT99Sa32T1jpfa31Ea91Va91Ia32V1lqqyznatWsXWTt34qiW4dXj3tGgBLvdxgcffODV4wqhtWbcuHG4PBp7nXbnfbyEcM39TY6yfcdOJk+e7IWE5iAzdwPY7NmzQVlwVavv1eOmRHu4JrWM2bNns27dOq8eW5jb/PnzWbZsGWUpbdDhMV45ZtvqTq6sbWPatKl/Wf5BnI4U/gDlcDj48afZOOPT0KGRXj/+TemlJEXCmNdH43Q6vX58YT45OTm8MXYsntgaOGs19+qx72pUQs0ozcujRlBUVOTVYwcjKfwBasGCBRwtLMBZ4+yGwlVWhBX6NDrK7j17+fLLL31yDmEedrud555/HpvDTWn6FadcifNchYfAgAsKyTuSx7hx47x67GAkhT8Aaa2ZNn06RCbgjqvjs/O0TnZySU07n3/+Gdu3b/fZeURwc7vdjBw5kp07dlCScQU6Is4n56kf56Zneinz589nwYIFPjlHsJDCH4B+//13dmzfTlnNC89qxuO5+FfjEmKsHl55eZSMmhBnTWvNhAkTWLx4Mba0i3AnpPn0fN3rlZER5+bNsW9QUFDg03MFMin8AUZrzaTJkyE8BldSA5+fLzZUc1+To+zYmcXHH3/s8/OJ4KG15r333uO7777DUetCr/frn4zVAv2aFlFcXMRbb433+fkClRT+ALN48WK2btlCWUrrs9pw5Xy0SXbSubaNqVOnsHr16io5pwhsHo+Ht956i2nTpuGo0RR7aocqO3dqjJue9Ur55Zdfy9f6FyeQwh9AHA4H77z7LjoqEVdywyo9910Ny0dNjBopoybE6TmdTl555RX++9//4qjZHHvdS3zeJXm8G+qVkRKtGffmWFl+5CSk8AeQb7/9lgM5OZSldvD6qIgzibAeGzVxhDGvvy4LY4mTKi4uZvDgwcydOxd7nbbY0zpWedEHCLXA3Y2KyDlwUJYfOQkp/AEiNzeXjz/+BFdCXdznsfzy+agf5+bW+iUsXLSIH374wZAMwn9lZ2fz4IABrFy1mrKMTjhqtzak6B9zYTUnbZMdfPH5Z3Kh9zhS+APEW2+9hcPpwpbW0dAc19W10byakwlvjZeFscSfli9fTv8HH2T/wSOUNrkWV3IjoyMB0KtBCXa7nc8//9zoKH5FCn8AWLJkSflwuNqtfDYGurIsCh68oHxhrBeHD5P+U5PzeDx89tlnDB4yhBIiKLqge/neEH4iJdpDp1o2Zs6cwaFDsgL8MVL4/VxRURFj3ngDHVUNR80WRscByhfG6t/0KFm7djNx4kSj4wiDFBYWMmTIECZPnoyzWn2Km9yADo81OtYJeqSX4XG5mDJlitFR/IYUfj/37rvvkp+fT2n65WDxn3+ulklOrqtbxsyZM//cE0CYx8aNG7n/gQf4PXMFtnqXYsu4AkKsRsc6qeqRHi6vZWPWrO85cuSI0XH8gv9UEnGC5cuX8+OPP2Kv2QJPdLLRcU5wW/1S6se5Gf3aq+Tk5Jz5BSLgaa35+uuvefTRRzlcZKOk6Q04azQ19CJuZdyYXobb5WLq1KlGR/ELUvj9VFFREa+NHo2OTMBRp7XRcU7KaoGHmh/F4yxjxEsv4nK5jI4kfKikpIThw4fz9ttvY4+tQ9EFPfyyQXIyNSI9XFrTxswZ30mrHyn8fmvChAnk5eVRmnEFWPzzKzSUf6DubVzExk2bmTRpktFxhI/s3r2b/g8+yMJFi7CntqesYVewhhsd66z0TC/D6XTyxRdfGB3FcFL4/dDixYv5+eefsae0CogW1cU1HVxZ28aUKVNkinwQWrJkCQ8OGMD+Q0cobXwtjpSWft+1czI1ozz8I6V8hM+ePXuMjmMoKfx+Ji8vj9Gvj0FHJ5/XRtRVrXejEtJiPYwaOUKGzQUJrTVTpkzhueefp9QSTVHTG3HHpRgd67z8s34pYRYPb40fZ+rZ51L4/YjWmtGjR1NcXExpRqcqW4TNG8JC4JHmhTjLihn2wn9k164A53a7GTt2LO+//z7OxHRKml7vta0SjRQXprkto5jMFSv56aefjI5jGCn8fmTmzJn89ttvlNVpjycy0eg4Zy0lysP9TYvYtHkLb7/9ttFxxDlyOp0Mf/FFvv/+e+wpLbHV7+zX15nOVpc6dpomuBg/fpxpZ59L4fcTu3fv5u2JE3HH18FZs5nRcc5ZxxoOrqtbxowZM/jxxx+NjiPOksvlYtjw4SxetAhbWkccqe0Dsj//dCwKBjY/SjgOnn9uKIWFhUZHqnJS+P2AzWbjhWHDcBFCWXqngP+g3V6/lObVnLw59g3Wrl1rdBxRSVprXn31VZYuWYKt7sU4a11odCSfSQzXPNq8kIM5+xn67LOUlZUZHalKSeH3A2+99Ra7d+2iJL0TOizK6DjnLcQCDzcvIincxfPPDWXfvn1GRxKV8MknnzBv3jzsddoG9LfOymqS4GJAsyI2btrI4H8/Q0lJidGRqowUfoPNmjWrfHZuSkvDllv2hZhQzaAWBXjsxfz7mafJz883OpI4jT/++INPP/0UZ1LDgBpNdr461HDwcPMiNqxfz5NPPG6ayV1nLPxKqZpKqUlKqZ8qbjdTSt3v+2jBb+3atbw5bhzu+Do46rQ1Oo7X1Yzy8GSLQnIP5vDvZ8zVogokxcXFjHr5ZXRUIrZ6lwZ8V+PZ6ljDweMtjrI7awcDHuzPtm3bjI7kc5Vp8X8CzAFqV9zeCjzhq0BmsX//fp577nncodGU1u9c5TtqVZVG8S4ebX6UnTu28+yQwZSWlhodSRxn8uTJFOTnU5reyW8XWvO11slOnm+Tj6v4CA89NJBZs2YF9Tj/ylSbZK31dMADoLV2AW6fpgpyeXl5PDVoEMU2O8UNrwq4qe9nq1WykwHNili/fj1Dhgw23YU0f5aTk8N3383AUb1JQMwS96V6sW5GtM+jcWwZY8aMYcSI4N1fujKFv0QplQRoAKXUxUClxz8ppUKUUquUUrMqbmcopZYrpbYrpaYppcLOKXmAOnr0KE8/8wwHDx2muOHV6Ih4oyNViYtqOhjQrIh169bx72eepri42OhIApg6dSoayrdJFMSFaZ5pdZR/ZpSy8NdfuLdvH/744w+jY3ldZQr/U8BMoIFSagnwGfDoWZzjcWDTX26/BryptW4I5AOmuV5w9OhRnnzyKXZm7aKkwZV4YmoYHalKXVyz/ELaxo0beOKJx2UfVIOVlJQwe/YcHNXqo8OijY7jNywKemaU8Z92BYTZj/DMM8/w6quvBlXr/4yFX2u9EvgHcCnwINBca12pwdlKqVTgBuCjitsK6AIc2/b+U+Cms48deI4cOcJjjz/BzqwsSht2DaoRPGejYw0HT7Q4yp6snTz80EAZ6mmgX3/9FbvdhqN6E6Oj+KX6cW5eapfHjfVK+XnObO65+1/Mnz8/KPr+KzOq5xagB9AEaAzcqJTqqpSqTHN1HPBvKq4PAElAQcV1AoBsoM4pzttfKZWplMrMzc2txKn8V3Z2NgMfepjde/ZS0vAqw4p++J7fAI3drXh5ZRxfbDVmzkCrJCeDWxdQeDiHhwcOYNOmTWd+kfC6n3+eC5EJeKKrGx3Fb4WFwG0NynixfQEJnjxGjBjB04MGkZ2dbXS081KZrp77KW+x96748yEwGFiilLr7VC9SSnUHDmmtV5xLMK31B1rr9lrr9tWrB+4bc82aNQwYOJDcvEKKG1+LO/6kv+eqhKU0DwVoFJsLQtlTbNwIjkbxLv7TJp9Q11GeePwxFixYYFgWM8rNzWXdurXYEzNMN3zzXNSLdTOsXQH3NC5m47qV3Nu3D5MmTcJmsxkd7ZxUpvBbgQu01v/UWv8TaEb5hd6LKP8FcCqXAT2UUruAqZR38YwHEpRSxypOKhC03/V//PFHnnrqKYpdIRQ1vQFPTOD+AvOFlGgPw9rmkxZpY/jw4Xz++edB8TU6EBzrsnAm1Tc6SsCwKLgq1c5rHfPokFTK559/Tt8+97BkyRKjo521yhT+NK31wb/cPlRxXx5wyrV3tdbPaq1TtdbpwB3AL1rr3sCvwK0VT+sDzDin5H7M4XDwxhtvMHr0aBzRNSlqegM6Is7oWH4pLkwzpHUBl9a0M2nSJEaMGIHdbjc6VlDTWvPDDz/iialhmlFl3pQQrhnQvJihbQoJKTnAc889x5AhgwPqelVlCv8CpdQspVQfpdSxQr1AKRUNnMuwjMHAU0qp7ZT3+QfVfn05OTk8+uhj5Uva1mpJaeNuQT9O/3yFhcCDzYq5rX4Jv/7yC48+8rBs5uJDK1euZO/ePdj96KJu+J7fUK7ybpOPNsUYdv3pbDRNdDGifT53NixhdeZy7u3bl88++wyHw2F0tDOqTOF/GPgYaF3xJxPQWusSrfWVlTmJ1nqB1rp7xd93aq07aq0baq1v01oHTfNu8eLF3P/AA2zdkUVZgy440toH7Yxcb1MKbky38XiLo+zJ2s6AB/uzceNGo2MFHa01H3/yCSosCle1DKPj/MlSmofS5WNAsoqshl5/OhtWC1xX18arF+XTOrGYyZMnc9+9fVm1apXR0U6rMsM5NbATcAE3A1fy93H5pme323nzzTf5z3/+QzGRFF1wI65q6UbHCkhtqzt5oW0BIfZ8Hn/8MebOnWt0pKCycOFC1q9bR1lKq6DaXMVo1cI9PHJhMU+3Ooojfx9PPvkko0eP9tux/6cs/EqpxkqpYUqpzcAEYA+gtNZXaq1le6UKO3fupF///syYMQNHrQspkf7885Ya42Z423waRNsYNWoUkydPlou+XlBQUMC48ePR0ck4/aibJ5i0THIyqkMeN9QtY/ZPP9L3nrv57bffjI51gtO1+DdTPhKnu9b6cq31BGSNnj95PB6mT59Ov/792ZuTS2nja7CndQyofXL9WWyY5t+tC7kixcZnn33GqFGjAqLv1F+5XC6Gv/gihYVFlKZfJl2QPhQeAr0aljK8fQGRzjyGDBnC66+/7ldrVJ3uX/8WIAf4VSn1oVKqKyADfoFDhw4xaNDTvPPOO9hjalPUrKeh4/ODldUC9zct4bb6JcybN48hsrrnOfF4PIwZM4bVq1ZRWu8SPFFJRkcyhfRYNy+2z+eGumX8+MMPDOjfj507dxodCzhN4ddaf6e1vgNoSvkQzCeAGkqpd5VS3aoqoL/55Zdf6HvvvaxeuxZb+mWUNeyKDo00OlbQOnbRt/8FRaxatYqnnx7kt/2m/sjtdjNu3Dhmz56NvXYbXMmNjI5kKqGW8tb/M62PUnAomwEPPsj8+fONjlWpi7slWuv/p7W+kfIJV6s4/cStoFRcXMyoUaN46aWXKFbRFDXrWd5PKrMeq8TlKQ4eaV7Els2bePrpQdLyrwSHw8GIESOYOXMm9lotZQVOA11YzcnIDnlkRJcxYsQIPvzwQzwez5lf6CNn1dGntc6vWEqhq68C+aN169Zx3333M3fePOy1W1PS9HqZ+GKADjUcPNr8KNu2buWF/zwvff6nkZuby6OPli+FYUvrUDG0WBopRooP0wxuXUjn2ja+/PJLXnvtNVwu15lf6ANyhec0XC4Xn3zyCY899hiHjpZR0vSG8i0S5cKYYdpWd3J/02IyV6xkwoQJRsfxSytWrOCBfv3Yun0HZQ274KzVwuhIooLVAvc2KeGWjFLmzJnDiy++aEjxlwp2Csi/wtUAAB/4SURBVIcOHeKJJ5/kk08+wVGtPkXNephu/Xx/1SnFzvV1y/j+++9ZuHCh0XH8htPp5MMPP2TQ009TYIfiC7rjSkw3OpY4jlJwU0YZdzUqYfHixbz22qtV3u0jMzhOYvny5YwcOYri0jLKMq7AldzQ6EjiOLfWL2VzQRhjXh9N+/btiY4290YiWVlZjBr1Mtu3b8OR3Bh73YsgJNToWOI0rk2z4XArvp47j1q1Urj//qrbk0pa/H/h8Xj4+OOPGTx4MEfdVoou6CFF309ZLdCncRFFxSV88803RscxjMvlYsqUKfTr158du/dS1rAL9ozLpegHiBvrlfGPFBuff/55lX57lcJfoaioiCHPPsunn36KM7kRxRd0R0fKBVx/lhHnpk2yg6+mT8PtNt/cwl27dvHww4/w/vvvY4utTVHzm6VrJ8AoBX2alFA/zs3ro1+rssUJpfBTsUPWwIf4/Y8/sNW7FFv65bKOSYC4qIadouIStm/fbnSUKuNyufjiiy/KFwTcuYuy+p0pa9BF5pMEKKsFBjY7itNextixb1TJ8iSmL/zr1q3jwQED2Xcwl9LG1+Ks0VSGvQWQJgnlIyLMspJnVlYWAwYO5KOPPsIWm1reyk+qL+/ZAFczysMt6cX89tvyKtnYxdSFf+nSpTz11FOUuC0UNe2OO7aW0ZF8y+0gIiKCW2+9lYiICMpcgV8swkLKW0dGToapCm63m6lTp/JAv37s2LWXsgZXYmsorfxgcnWqjdrRmg/ff8/nXZemLfwLFizg+eefxx6WQHGT602xoqZyOejevTuPPPIIN9xwA6VBUPhtFT9DaGjwXszMzc1l0KBBvPfee9hj65S38v1oLX3hHVYL3JJRzO692SxatMi35/Lp0f3U4sWLeemll3BFV6ekUTfTjIDQ1jBmzZpVsfXeD9S0Bv5Sxxvyy//tLrzwQoOT+EZmZibDX3yRktIyytIvL19rR7p1glb76g5qRGm+/uorrryyUvtcnRPTtfjXrVvH8BdfxBWVbKqiD0BIGDabjW+++QabzUZkgBd+rWHpgQiqJyeRkRFcLWCtNVOnTuWZZ56hyG2l6IKeuKo3lqIf5CwKutYuZcPGjezdu9d35/HZkf1QTk4OQ597DndoNCWNrjZX0Q9Ca4+EsrnAyp139UYFUUH0eDxMmDCB9957D0dCPYqbmmBocRBefzpXF9V0oCjvjvYV0xR+j8fDy6+8QnGpjeKGV8kG6AGu2Kn4bHssdWqncOONNxodx2u01rzxxht8++23OGo2x9bgSlM0UILx+tO5qhbuoW6shxWZmT47h2n6+GfOnMm6tWspy+gkK2sGOI+GdzfEkm+3Mv6554Pqwu6nn37KDz/8gD2lJY467UzTtROM15/OR6M4B0u3bkFr7ZNvs6Zo8TudTj7//AvcsTVxJckSDIHMo+HjzdGsywvl8SeeoHnz5kZH8prVq1fzyaef4kxqaKqiDwTd9afzVSvKTWmZjcLCQp8c3xSFf9myZRw5chh7rZbm+jAFmWNFf2FOBHfffTfdu3c3OpLXuN1uRr/+OoTHYqt3ibxPTS6iYn6KzWbzyfFN0dWzfv16sITgjqttdBRxjuxu+GBjLH/khtGnTx/69u0bVBd0f/vtN/bv20dZg86m6NMXp2f3+HZ+iikK/+HDhyE8GiwhRkcR56DArhi3Lp6sohAefvhhbr311qAq+lA+i1yFhssiawKA/SUhRISHU61aNZ8c3xSFPzk5GeUoBY8HLKbo3QoaWwusTNwYT6kOY+TIYVx22WVGR/KJnTt34oyoJru7CTwaVudF0KZtG581cEzxLmvTpg3a7cJ6xDwrOAY6rWHO3gheWRVPZGItJk58J2iLPoAlRL6NinK/HwrjSBlcddXVPjuHKQr/xRdfTKPGjYncvxJlO2p0HHEGxU7FW+tj+XJbNBddcinvf/AhDRsG92islFq1CLUXlP/GE6ZV4lRM3xlD/Yx0Onfu7LPzmKLwK6V4dsgQosNCiNk2B2UvMjqSOIWtBVb+k1mNNXmRDBw4kJEjRxIbG2t0LJ+76KKL0I4yQopyjI4iDOLR8N7GWAocVgY9/QwhPvwW6LPCr5RKU0r9qpTaqJTaoJR6vOL+akqpuUqpbRX/TfRVhr+qX78+Y98YQ6TFTezGGVgPb5PWlR/xaPguK5KXV8UTFl+TtydOpFevXlhMck3miiuuoFpSEhH7Vsr70oRcHpi4PoY1R0J59LHHfD4/xZefKhcwSGvdDLgYeFgp1QwYAszXWjcC5lfcrhJNmjRh8qRJXNisKZFZi4ncPg9LWX5VnV6cQp7Nwqur4vk2K4oru3Tlo0mTadq0qdGxqlR4eDj9+/XDUnyIsAPrjI4jqtBRh2LMmjj+yA3noYceomfPnj4/p89G9Witc4Ccir8XKaU2AXWAnkDniqd9CiwABvsqx/FSUlIYP24cX3/9NZM//hjr+v/irJaBvXbb4F8Iyw+tOhzKh5vjcKlwnn32Kbp16xZ0QzUr65prrmHZsmUsXLQId2Qi7oQ0oyMJH9ucb+XdTfEUu60MHjyI6667rkrOWyXfo5VS6UAbYDlQs+KXAsABoOYpXtNfKZWplMrMzc31ah6LxcLtt9/OtKlTueuuu4gu2U/Mhm+J3DaXkMLsoP2q7YmqhgYUmqYJTurGuAzL4vLAlG1RvLk2jlpp9fnwo4+45pprTFv0ofxa1ODBg2nYsCHRO38lpOiA0ZGEj5Q4FR9vjublVfFEVUvhnXferbKiD6B8vbGvUioGWAiM0lp/q5Qq0Fon/OXxfK31afv527dvrzN9uFJdfn4+33zzDTO/n8XRwgKIiMOe3BhnckN0aJTPzmuEmD8+JjLEzQf/MK6Lq8CumLAhjm0FVm666SYGDhxIeLislnpMfn4+jz72GPv25VDS4EpTtPwjN/+I9S+/6JomOBnaNvhG4Lk9sCgnnG93xVDktHDrrbfSt29foqJ8U2eUUiu01u2Pv9+nE7iUUqHAN8CXWutvK+4+qJRK0VrnKKVSgEO+zFAZiYmJPPDAA/Tp04dFixbx3YwZrFubSfi+FbhjU3AkNcCVWA9CwoyOGvC2FVqZsCGeMh3GCy8MoUuXLkZH8juJiYm8PWECgwY9zY7t87HVuwRn9SZGxxLnwaNhRW4YX2fFkFOiaN6sGU88+SSNGjUyJI/PCr8q/84+CdiktR77l4dmAn2AVyv+O8NXGc5WaGgoXbt2pWvXruzevZt58+Yx5+e5HMpajNq9DEd8Kq5q6bji02Q9lXPw28EwPtgUS42atRg76mXq169vdCS/lZCQwFtvjWf48Bf5448lWMoKsKd1kJm9Acajyydkfb87mr3FFuqmpTLy2QFcdtllhnZr+qyrRyl1ObAYWAd4Ku4eSnk//3SgLrAbuF1rnXe6Y/m6q+d0tNZs3LiRefPmMf+XX8u7giwhuOJq40xMx5VQN6A2dTGiq0drmL03ginbo2nZ4kJGjnqZuLjg39zeG1wuF++88w7ffvst7rgUyup3RodGGh3L64Ktq8fuhiUHwpmdHc2BEkXdtFR6/+tuunbtitVadSvlnKqrx+d9/N5gZOH/K7fbzfr161m0aBELFizkyJHDoCy4Y2vhTKiLK6EuOjzG6JinZUTh/y4rkm+zoujcuTPPPvus9Oefgzlz5jBmzBicljBKM/6BO7aW0ZG8KnzPb4Qe2ozSHjJiXTSKd/KvxqVGxzpr+XbFvOwIfs2JotgBjRs1pPe/7qZTp06GzEmRwu9lWmu2bNnCwoULWbz4f2Rnl2+MrKOTcMSn4Uqohyeqmt+tq17Vhf/7XRF8tTOaa6+9ln//+9+mmZDlC9u2beM/L7zAgQMHsNVpj7PWhX73/jof0aunYnGWMqpjAWkxbqPjVJrWsKXAyrx9EazIDccDXH755dx22+20aNHC2C4dIy7uBjOlFE2bNqVp06Y8+OCD7N27lyVLlrB48f/YuHENev9qCI/BEV8XV2Jd3DG1TLcy6NIDYXy1M5quXbvyzDPPSNE/T40aNeKjDz9k9OjRLFq0CGvRAcrqdwJrhNHRTKnMBcsOhjN/XxR7iy3EREfxz9u607NnT+rUqWN0vNOSFr8P5Ofns2zZMv73v//xxx9/4HQ6UdZwHHGpuBLr4YpPhRBjfudWVYt/T3EIL61IoGmzCxn75rgq7dcMdlprvvvuO96eOBF3SAQl9TvjialhdKzzFigt/r3FIczfF8GygxGUuaBhg/rcfMs/6dq1KxER/vVLWFr8VSgxMZHrr7+e66+/nrKyMjIzM1myZAn/W7KE4h07UCGhOOLq4EpMx5UQfCOE3B54b2McsXEJDBv+ohR9L1NKcfPNN3PBBRfwwrDhHNr8I7a0DjhrNAuqrh9/4vJAZm4Y8/dFsqXASmiolSu7dKFnz540a9Ys4CYeyifSxyIjI+nUqROdOnXC5XKxdu1aFi5cyMKFiyjYuQBlCSkfJprUoHyYaBDsEjZ/XwTZxRZGjBhEUlKS0XGCVtOmTZn00Ye88uqrLF2yhJDiQ9jSLw+6hoSRCuyK+fsiWJATRaEdUmrVZMCAm7nuuuuIjw/cJV6k8Fchq9VK27Ztadu2LY899hgbNmxg4cKFzJs/n8Ltv6Cs4dgT03ElNcAdUzMgW29OD8zYHU27tm25/PLLjY4T9GJjYxk5YgRTpkzho48+wmorpKRhV3R48C9l7UtZR0OYszeS5bnheHT5stk333wLHTp0CIprVVL4DRISEkLLli1p2bIlAwcOZOXKlcydO5eFixbhyN0CkQnYkpvgTG4YUPMEVh0Oo8gBve64I+C+/gYqi8VC7969ady4McOHv4hl0/eU1L8Sd1yK0dECitawPi+UWXui2JRvJTIinJtu7s7NN99Mamqq0fG8Sgq/H7BarXTs2JGOHTvy5JNPsnjxYr6bMYNNG5cTuX8F9sT6OGs1xxNZJVsXnJffD4WRlJhAu3btjI5iOh06dOCDD95n8JAhZG+bQ1m9y3AlG7MkQCDRGlYeDmXm7miyjoaQnFSNhx66g+uvv56YGP+el3OupPD7maioKK655hquueYatm3bxowZM/j557k4Dm/FWS0DR+3Wfv0LYFdxOBd2aOXT3YPEqdWpU4d333mHF14YxqpVi7E7SnGktAzIbsOqsLXAyrQd0WwrtFI7pRZP9/8X3bp1IywsuNflCvzOqiDWqFEjnn76aaZPn0bv3r2JKc0hev1/idixAOXwv1mNTg8cKoWMjAyjo5habGwso0e/xtVXX034vhWE71ketEuNn6tCh2Li+hhGrownz5LMoEGD+OzzL+jevXvQF32QFn9ASEhIoF+/fuV7CEybxvTpXxG2YR9lddqVr9roJ605l6c8h6+WmBWVFxoayrPPPktiYiLTp09HeZzY0i+TRd6AJTlhfLE9FocO4d577+H2228nMjL41j86HXkXBJD4+Hj69+/Pxx9PplWLZkTsXkrU1jngshsdDYBjbcpAmBRoBhaLhYEDB9K3b19CD28jYuci0J4zvzBIuTzw8eZo3t8US0bj5nw0aTJ9+vQxXdEHKfwBKS0tjTfHjuWpp54irOQgsZtnocoKjY5FZIgmLASOHDlidBRRQSlF37596devH6F5O01b/O1ueH1NPL/uj+Cuu+5i/FtvUa9ePaNjGUYKf4BSStGjRw/GjRtHXJgidutPKHuxwZkgOUKzf/9+Q3OIE/Xu3Zv+/fuXF/+sxaYq/i4PTFgfx5aCUIYOHUr//v1NP/hACn+Aa9GiBePeHEuEFWK2/Qxuh6F56kY72Lpls6EZxMnddddd3HfffYQe2UH4rqWmueA7Y1cka4+E8uRTT9GtWzej4/gFKfxBoH79+rw8ahTYCgnPXmFolow4F4dyD0t3j5+65557uPvuuwk7vJXwPcuCvvjvKwlh1u4orr76am688Uaj4/gNKfxBok2bNvzzllsIO7QJS8lhw3I0jncBsG7dOsMyiNO777776NWrF2GHNhO+9/egLv5z9kZgDQ3l4YcfNjqKX5HCH0TuvfdeIiIjCTuw3rAM9WJdhIdI4fdnSikGDBjALbfcQtjBDYTv/SMoi7/DDcsORdCl61UkJCQYHcevSOEPIjExMdzYvTuh+Vkop82QDFYLpMe62LjBuF8+4syUUjz66KPcfPPNhB1cT/je4Jvktf2oFbsLOnXqZHQUvyOFP8hcffXVoDUhBXsMy9Agzsn27dtxuVyGZRBnppTiscce45///CdhBzcSvntpUI322V5Yvjx1y5YtDU7if6TwB5lGjRqRlJSMtTDbsAwpUW6cLjeHDh0yLIOoHKUUjzzyCL179yYsdwsROxaCx393vzobu4pCqJ1SK2gXWjsfUviDjFKK9u3bEVZ80LCv7tUjygvHgQMHDDm/ODtKKfr168eAAQMIzc8iatvPfjMb/HzsLgmnSdMLjI7hl6TwB6FWrVqhnWVYbMbM5g2tmBvjdDoNOb84N3fccQdDhw4lrOQQMVt+RNmLjI50zvJsFnJLy3cpEyeSwh+EWrRoAUBI8UFDzh9k1whNpVu3bowZM4Zo5SB20yxCjuYYHemcrM0r799v27atwUn8kxT+IJSamkpcfDwhRcZ0teSWlb+tUlJkB6hA1KZNG95/7z1q10wiauscQg9uDLjf5osPRJCWWoeGDRsaHcUvSeEPQkop2rRuTahB/fy7iq2EWkOk8AewtLQ03n/vPS65+CIi9vxWvribOzC67jbnW9lWYOXGHj1l+89TkMIfpNq1awf24irv5/doyDwcSYeOHQkNDa3ScwvviomJYdSoUeXr++TvJGbT91jK8o2OdVouD0zZEUNyUjV69uxpdBy/JYU/SHXs2BGAkMK9VXretUdCOVIGV17ZpUrPK3zDYrFwzz33MPaNN0gIh5hN3xOau8Vvu35m7ook62gIjzz6GOHh4UbH8VuGFH6l1LVKqS1Kqe1KqSFGZAh2tWrVIqN+fUKrcCKXR8NXWTHUTqnFlVdeWWXnFb7Xtm1bJk+aRJtWLYnYtYSIHQv8bsjnytxQZuwqX5Ctc+fORsfxa1Ve+JVSIcBE4DqgGXCnUqpZVecwgys7dyak6CDKUVIl55ubHcHeIgv3P9APq1V29Qw2SUlJjBkzhn79+hFeuJvYjTO8OoDAE3ruO2HtOGrl3U3xNG7ciEGDBnktU7AyosXfEdiutd6ptXYAUwHpjPOBLl3Ku1usR3b+353KQniI97+m7ykKYdqOaC695JI/zyuCj8VioXfv3rz99tvUTIwhastPhO1b6ZWlHtyx5zYYYFdRCK+viadacg1efuVVIiIizjtLsDOi8NcB/trxnF1x398opforpTKVUpm5ublVFi6YpKam0qRpU8Lzdvx5n7ZYSY7w7noshQ7F+A3xxMcn8O/Bg2UkhQk0a9aMyZMm0e3qqwnfv5roLcbsALfzaAivrU4gJiGZN8eNJykpqcozBCK/vbirtf5Aa91ea92+evXqRscJWNddey2qNA9LqW82RrG5YOzaeI66wxn1yquy/K2JREdHM3ToUJ5//nmiXEeJ3TgDa15WlZ1/S4GV11YnEFetBuPfmkCtWrWq7NyBzojCvw9I+8vt1Ir7hA906dKFEKuV0MPbvH5suxveXBfP7iIrw4YNl+nxJnXVVVcxedIkGjfIIHLHr4TvWgoe367MuuZwKKPXxJNcqw7jJ7wtc0bOkhGF/w+gkVIqQykVBtwBzDQghynExcVx6SWXEJ6f5dUld20ueGNNfPkG1s89x6WXXuq1Y4vAU7t2bSZOfJs77riDsNzNxGz+wWdr/fx2MIxx6+LIqN+QCW9PpEaNGj45TzCr8sKvtXYBjwBzgE3AdK31hqrOYSbdunVDO8oIObrfK8crdipGr0lga2Eozz3/PFdddZVXjisCm9VqZcCAAbz88stEYyN200xCCrw7j2Th/nDe3RBL8wsv5M1x46Vr8RwZ0sevtf5Ra91Ya91Aaz3KiAxm0rFjRyIiI73S/5pvV4xalcDukjBefOklunbt6oWEIphceumlfPThh2TUTSVq21xCc9Z5ZcLXwv3hTNocQ7v27Rj9+hiio6O9kNac/PbirvCe8PDw8u6eo9nAuX8A95dYeGllNfJckbw2+nXZ0k6cUu3atXln4kSuuOIfRGT/QfiuJefV1bj0QBiTNsfQoUN7Ro16WYZsnicp/CZx6aWXoh1lqHNcaGt7oZWRqxJxh8UxbvxbstytOKOIiAiGDx/Gv/71L8IObyVy+3xwn/1F33VHQvlwUyytWrZk5MhRshSDF0jhN4l27doBoM6hxb/mSGj5sLmkWkx8512aNGni7XgiSFksFh544AGefPJJrIXZRG2fe1bFP6fUwsSNcaRnZPDyK69I0fcSKfwmkZiYSGpq2pmfeJylB8IYtzaOtIz6vD3xHerUOWGunRBn1LNnT4Y++yzWogNEbZ9XqX19HW6YsD6e0MhYRr38ivTpe5EUfhNp1uzs9h/9dV8472+MpWWrVowf/xbVqlXzUTJhBt26dWPw4MGEHN1PRNaiM17w/SYriuxiC0Ofe14mZ3mZFH4TadCgQaWf+/PeCD7eEsNFF1/Eq6+NltaW8Iprr72W/v37E5qXRVjOmlM+L7s4hDl7I+nevTsXXXRRFSY0Byn8JpKWVrmunnnZ4XyxLZpOl1/OiBEjpV9VeNWdd95J165dCd+38pRzS6bvjCIqKooHHnigitOZgxR+E6nM1+X/5YTx2dYYLr30UoYNHy67aAmvU0rx9NNPU7tOHaJ2LzlhS8fs4hBWHw7j9l53yAQtH5HCbyJnmtq+Ic/KR5tjadu2DcOGDZM19YXPREZGMvTZZ8FeTNj+1X97bMH+CEJDrbJ1og9J4TeRmJgYGjVqdNJlkw+UWnh7Qzx169aV7h1RJS688EKu6daN8EMb/7ak86aCUC699DLi4+MNTBfcpPCbzMk+TA43TNgQjzUylldefU0u5Ioqc99992EBwg6s/9v9l112mTGBTEIKv+CrnVHsLbLw7NDnZHlbUaVq1qxJ165dCM/bDur/ylGHDh0MTBX8pPCb3PZCK3P2RnLTTTdx8cUXGx1HmFD37t3RLgfhB9YC8P7775OYmGhwquAmV+9MzKPh820xJFVLpH///kbHESbVsmVLnnnmGfLz84mNjaVRo0ZGRwp6UvhN7PdDYWQdDeG55x4iKirK6DjCpJRS3HDDDUbHMBXp6jEprWHWnmjqpqXKmvpCmIwUfpPaUmBlT5GFO+68C4tF3gZCmIl84k2oyKn4YU8kkRHhdOnSxeg4QogqJn38JhMXF8fB0hAOlobQvfvVspORECaktBf2wvS19u3b68zMTKNjBAW73c7+/eULY6WmpspaPEIEMaXUCq11++Pvlxa/yYSHh5ORkWF0DCGEgaSPXwghTEYKvxBCmIwUfiGEMBkp/EIIYTJS+IUQwmSk8AshhMlI4RdCCJMJiAlcSqlcYLfROYJIMnDY6BBCnIS8N72rnta6+vF3BkThF96llMo82Ww+IYwm782qIV09QghhMlL4hRDCZKTwm9MHRgcQ4hTkvVkFpI9fCCFMRlr8QghhMlL4hRDCZKTwm5xSqrNSapbROURwUEo9ppTapJT60kfHH66UetoXxzYT2YhFCOFNDwFXaa2zjQ4iTk1a/EFAKZWulNqslPpEKbVVKfWlUuoqpdQSpdQ2pVTHij/LlFKrlFJLlVJNTnKcaKXUZKXU7xXP62nEzyMCk1LqPaA+8JNS6rmTvZeUUn2VUt8ppeYqpXYppR5RSj1V8ZzflFLVKp7XTyn1h1JqjVLqG6VU1EnO10ApNVsptUIptVgp1bRqf+LAJYU/eDQE3gCaVvy5C7gceBoYCmwGOmmt2wAvAC+f5BjPAb9orTsCVwKvK6WiqyC7CAJa6wHAfsrfO9Gc+r10IXAL0AEYBZRWvC+XAfdUPOdbrXUHrXUrYBNw/0lO+QHwqNa6HeXv83d885MFH+nqCR5ZWut1AEqpDcB8rbVWSq0D0oF44FOlVCNAAyfbZb0b0OMvfagRQF3KP3hCnI1TvZcAftVaFwFFSqlC4PuK+9cBLSv+fqFSaiSQAMQAc/56cKVUDHAp8JVS6tjd4b74QYKRFP7gYf/L3z1/ue2h/N95BOUfuJuVUunAgpMcQwH/1Fpv8V1MYRInfS8ppS7izO9VgE+Am7TWa5RSfYHOxx3fAhRorVt7N7Y5SFePecQD+yr+3vcUz5kDPKoqmlBKqTZVkEsEp/N9L8UCOUqpUKD38Q9qrY8CWUqp2yqOr5RSrc4zs2lI4TeP0cArSqlVnPqb3gjKu4DWVnQXjaiqcCLonO976T/AcmAJ5denTqY3cL9Sag2wAZDBCJUkSzYIIYTJSItfCCFMRgq/EEKYjBR+IYQwGSn8QghhMlL4hRDCZKTwC3EGFevObFBKrVVKra6YhCREwJKZu0KchlLqEqA70FZrbVdKJQNhBscS4rxIi1+I00sBDmut7QBa68Na6/1KqXZKqYUVK0POUUqlKKXilVJbjq18qpSaopTqZ2h6IU5CJnAJcRoVi4H9D4gC5gHTgKXAQqCn1jpXKdULuEZrfZ9S6mrgJWA80Fdrfa1B0YU4JenqEeI0tNbFSql2QCfKlxeeBoykfGnhuRVL0YQAORXPn1uxfsxEQNaOEX5JWvxCnAWl1K3Aw0CE1vqSkzxuofzbQDpw/bGlsoXwJ9LHL8RpKKWaVOxhcExryvcnqF5x4RelVKhSqnnF409WPH4X8HHF6pJC+BVp8QtxGhXdPBMo3xDEBWwH+gOpwFuUL3dtBcYBi4DvgI5a6yKl1FigSGs9zIjsQpyKFH4hhDAZ6eoRQgiTkcIvhBAmI4VfCCFMRgq/EEKYjBR+IYQwGSn8QghhMlL4hRDCZP4/oEL56smScpIAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YfmldKkDvF8-",
        "outputId": "c8a8aa25-c291-40a7-df46-428bd4a963d1"
      },
      "source": [
        "data.hist(edgecolor='black',bins = 25, figsize= (20,20))\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 9 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hekWsntMq84U"
      },
      "source": [
        "from the above violin plot we can observe that survival rate is good for children, high for women and less for men as age increases."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-vxDNWzUtjg"
      },
      "source": [
        "Now we are done with understanding the data. we are diving in to the second step."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UN93TW6xrp_H"
      },
      "source": [
        "**STEP-2: CLEANING THE DATA**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "guDYDQvNsGBn"
      },
      "source": [
        "we can observe that there are null values in Age,Cabin,Embarked columns in our dataset.\n",
        "\n",
        "we can observe that the cabin column has 687 null values out of 891 entries.i.e,nearly 80% of the total entries are null values.so there is no use of considering cabin column .we can remove it using drop method."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MkyL7nQ4fWhG"
      },
      "source": [
        "data.drop(\"Cabin\",inplace=True,axis=1)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "oLGvhvtWfgqc",
        "outputId": "3c3de6b2-07cf-49f6-9398-6c6760fab40b"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...            Ticket     Fare  Embarked\n",
              "0            1         0       3  ...         A/5 21171   7.2500         S\n",
              "1            2         1       1  ...          PC 17599  71.2833         C\n",
              "2            3         1       3  ...  STON/O2. 3101282   7.9250         S\n",
              "3            4         1       1  ...            113803  53.1000         S\n",
              "4            5         0       3  ...            373450   8.0500         S\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mn7fN7M0x0wN"
      },
      "source": [
        "by using the drop method we removed Cabin column."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9K4OfxGYgASo"
      },
      "source": [
        "As there are some null values in Age column we need to impute average values to null values.\n",
        "\n",
        "But Age column is not useful in training the model so we can drop the age column using drop method in pandas."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_51LIuBCfuNG"
      },
      "source": [
        "data.drop(\"Age\",inplace=True,axis=1)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "iOoAMmRMf5e7",
        "outputId": "6b463050-2be7-42e2-b93a-3c5e4891ce1a"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...            Ticket     Fare  Embarked\n",
              "0            1         0       3  ...         A/5 21171   7.2500         S\n",
              "1            2         1       1  ...          PC 17599  71.2833         C\n",
              "2            3         1       3  ...  STON/O2. 3101282   7.9250         S\n",
              "3            4         1       1  ...            113803  53.1000         S\n",
              "4            5         0       3  ...            373450   8.0500         S\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rO-kEi5Fuqss"
      },
      "source": [
        "Hence we can also manage the null values in many other ways like filling those values with constant or central tendency values like mean or median or mode based on its accuracy with the final predicted values.\n",
        "\n",
        "But here I proceed with the basic concept that is to delete the data with the atleast one null value in it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4UpBXmpIhA0p"
      },
      "source": [
        "* Cleaning is done,\n",
        "* Now, We are going to convert some categorical data into numeric. For example, the sex column.\n",
        "* Let’s use the get_dummies function of Pandas. It will create two columns, one for male, one for female."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0NOAQUbNhmVY"
      },
      "source": [
        "sex = pd.get_dummies(data[\"Sex\"],drop_first=True)\n"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "1quD9cVihuLK",
        "outputId": "2c2e95c8-7cf1-4060-e3a5-57c0ad061bca"
      },
      "source": [
        "sex.head()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   male\n",
              "0     1\n",
              "1     0\n",
              "2     0\n",
              "3     0\n",
              "4     1"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iU0lId1iiLGz"
      },
      "source": [
        "embarked = pd.get_dummies(data[\"Embarked\"],drop_first=True)\n",
        "pclass = pd.get_dummies(data[\"Pclass\"],drop_first=True)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "fobFpZYeiWZF",
        "outputId": "7c9c4b83-c150-4611-e27b-68fadcb77dec"
      },
      "source": [
        "pclass.head()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   2  3\n",
              "0  0  1\n",
              "1  0  0\n",
              "2  0  1\n",
              "3  0  0\n",
              "4  0  1"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pPbtcHXbieGR"
      },
      "source": [
        "Adding these variables to the original data set.\n",
        "\n",
        "we can add the variables that are modified into the original data set by using concat method in pandas."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p21-VKRmimO7"
      },
      "source": [
        "data = pd.concat([data,pclass,sex,embarked],axis=1)"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "l_kruziFixqT",
        "outputId": "12e86bfd-6fba-4f47-c769-ef58bce509bc"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>male</th>\n",
              "      <th>Q</th>\n",
              "      <th>S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ... male  Q  S\n",
              "0            1         0       3  ...    1  0  1\n",
              "1            2         1       1  ...    0  0  0\n",
              "2            3         1       3  ...    0  0  1\n",
              "3            4         1       1  ...    0  0  1\n",
              "4            5         0       3  ...    1  0  1\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xorG-69gjDd_"
      },
      "source": [
        "Remove the columns that are not going to be useful for training the model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ItZSsmLyjc3r"
      },
      "source": [
        "data.drop([\"PassengerId\",\"Pclass\",\"Name\",\"Sex\",\"Ticket\",\"Embarked\"],axis=1,inplace=True)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "mP7_yks_jmoW",
        "outputId": "97c4dd15-511d-4966-e855-a0f92c6eb47a"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>male</th>\n",
              "      <th>Q</th>\n",
              "      <th>S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Survived  SibSp  Parch     Fare  2  3  male  Q  S\n",
              "0         0      1      0   7.2500  0  1     1  0  1\n",
              "1         1      1      0  71.2833  0  0     0  0  0\n",
              "2         1      0      0   7.9250  0  1     0  0  1\n",
              "3         1      1      0  53.1000  0  0     0  0  1\n",
              "4         0      0      0   8.0500  0  1     1  0  1"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nm-SucC1j5E0"
      },
      "source": [
        "X will contain all the features \n",
        "\n",
        "whereas Y will contain the target variable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZPSdE8yDkJxQ"
      },
      "source": [
        "Y=data[\"Survived\"]\n",
        "X=data.drop(\"Survived\",axis=1)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PpJ2hi_7kdLw"
      },
      "source": [
        "Now we are done with EDA and cleaning the data .the next step is :\n",
        "\n",
        "**SPLITTING THE MODEL WITH 80-20%**\n",
        "\n",
        "* Before Building model, we have to separate the data of columns with features and with values to be predicted as y and X\n",
        "* And then separate the 20% data in whole data along with the target column which is used to evaluate the performance of the data\n",
        "\n",
        "* use train_test_split from sklearn.model module to split our data.\n",
        "\n",
        "*  80% of the data will be training data and %20 will be testing data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tjs2gmMdlEIe"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 32)"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ydby553jl5M2"
      },
      "source": [
        "The next step is :\n",
        "\n",
        "**TRAINING THE MODEL USING LOGISTIC REGRESSION.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GY93VhfCwUmn"
      },
      "source": [
        "**DEFINING AND FITTING THE MODEL**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TU7Df8N7mOy0",
        "outputId": "f4a93755-8de3-4ba4-bde6-e4f64f7afbf6"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "logmodel = LogisticRegression()  #define\n",
        "logmodel.fit(X_train,Y_train)    #fit"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1YG2Q2EUwe4c"
      },
      "source": [
        "Through the above code, we are defining the model specified above and fitting it with the feature values along with the values to be predicted that is both X_train and y_train"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HD36L7owm-S4"
      },
      "source": [
        "**ACCURACY**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YesyzcnBnA1N",
        "outputId": "9d48412b-dc09-47c9-e33d-1c9411fd5ef2"
      },
      "source": [
        "predictions = logmodel.predict(X_test) #predict\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(Y_test, predictions))\n"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.83      0.81       108\n",
            "           1       0.73      0.68      0.70        71\n",
            "\n",
            "    accuracy                           0.77       179\n",
            "   macro avg       0.76      0.75      0.76       179\n",
            "weighted avg       0.77      0.77      0.77       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2pOK7wN1wyjp"
      },
      "source": [
        "Finally generating the final values by inputing the 20% of the data separated from total data that is train_data and storing those values in predictions and comparing those with the actual values to know the accuracy."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "42ZxI3SJnMA-"
      },
      "source": [
        "**CONFUSION MATRIX**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2y5gJM0ZnSIP",
        "outputId": "947ef115-1523-49b1-f1bf-7a99dcfce89f"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(Y_test, predictions)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[90, 18],\n",
              "       [23, 48]])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1fiPxHWQncMH"
      },
      "source": [
        "True positive: 90 (We predicted a positive result and it was positive)\n",
        "\n",
        "True negative: 48 (We predicted a negative result and it was negative)\n",
        "\n",
        "False positive: 18 (We predicted a positive result and it was negative)\n",
        "\n",
        "False negative: 23 (We predicted a negative result and it was positive)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jgI1Kk5doIrP"
      },
      "source": [
        "**TRAINING THE MODEL USING RANDOM FOREST**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qMzM6Ebxw9s6"
      },
      "source": [
        "**DEFINING AND FITTING THE MODEL**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HBFx0DD3oRyf",
        "outputId": "b29c7103-6d94-486f-c288-00ad4a4b78a2"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "clf=RandomForestClassifier()  #define\n",
        "clf.fit(X_train,Y_train)      #fit"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7cVLNU6UxGlu"
      },
      "source": [
        "Through the above code, we are building a RandomForestClassifier model by fit the training data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4cUgQIdSrfn7"
      },
      "source": [
        "**ACCURACY**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vfJzL9Yty1XD",
        "outputId": "65c665ee-66c3-42f1-c06a-36569bd34ef3"
      },
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "predictions=clf.predict(X_test)\n",
        "print(mean_absolute_error(Y_test,predictions))"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.2011173184357542\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TYO2UXsFzN1i"
      },
      "source": [
        "* Actually there are many ways in measuring the accuracy of the model which mean by evaluating the model based on the output in sklearn.metrics module.\n",
        "* But here we are using mean_absolute_error to find it which is imported from sklearn.metrics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NsOL4L54sf9f"
      },
      "source": [
        "**CONFUSION MATRIX**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bXifG0qisa_M",
        "outputId": "772a78d0-6055-430d-d94d-868186839580"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(Y_test, predictions)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[93, 15],\n",
              "       [21, 50]])"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1xSl_aGNsnf0"
      },
      "source": [
        "True positive: 93 (We predicted a positive result and it was positive)\n",
        "\n",
        "True negative: 50 (We predicted a negative result and it was negative)\n",
        "\n",
        "False positive: 15 (We predicted a positive result and it was negative)\n",
        "\n",
        "False negative: 21 (We predicted a negative result and it was positive)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zRueV-COs_Yd"
      },
      "source": [
        "**TRAINING THE MODEL USING DECISION TREE**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2HUDsPoFtIcQ",
        "outputId": "7af2d98e-abbc-48fa-c1dd-5973cf0246d6"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "decision_tree=DecisionTreeClassifier()   #define\n",
        "decision_tree.fit(X_train,Y_train)       #fit"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
              "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                       random_state=None, splitter='best')"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ExWKbP9zr7_"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EDm9YZo-zsCp"
      },
      "source": [
        "Through the above code, we are building a Decision tree model by fit the training data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lC9phmjWt7Sn"
      },
      "source": [
        "**ACCURACY**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aB1vXXUVt-5O",
        "outputId": "a35dbddb-2c75-40c8-805f-d85265ae5548"
      },
      "source": [
        "predictions=decision_tree.predict(X_test)  #predict\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(Y_test, predictions))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.88      0.84       108\n",
            "           1       0.79      0.69      0.74        71\n",
            "\n",
            "    accuracy                           0.80       179\n",
            "   macro avg       0.80      0.78      0.79       179\n",
            "weighted avg       0.80      0.80      0.80       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9ffkypMEuJC6"
      },
      "source": [
        "**CONFUSION MATRIX**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ufXSN0guOhE",
        "outputId": "dde40e34-3399-4c78-eb57-45a3e26fddbb"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(Y_test, predictions)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[95, 13],\n",
              "       [22, 49]])"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EvcKt4JFuWCz"
      },
      "source": [
        "\n",
        "True positive: 95 (We predicted a positive result and it was positive)\n",
        "\n",
        "True negative: 49 (We predicted a negative result and it was negative)\n",
        "\n",
        "False positive: 13 (We predicted a positive result and it was negative)\n",
        "\n",
        "False negative: 22 (We predicted a negative result and it was positive"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ujNbqNsN0AxB"
      },
      "source": [
        "**CONCLUSION**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6zGlh1GB0O96"
      },
      "source": [
        "Now, Here coming up with the conclusion that we are building a machine learning model and to do this we have done the following steps:\n",
        "\n",
        "* EDA which is to explore the data by looking the sample and knowing about the data like corelation with respect to the final predicted values and visualizing it in pictorial representation.\n",
        "\n",
        "* In Data cleaning process we actually removed or manipulated some of the data which is not that much important/unecessary to build machine learning model by using the functions in library pandas.\n",
        "\n",
        "* Finally, To built a machine learning model we divided/splitted the data into the ratio 4:1(80% and 20%) to train and test the data by using scikit library\n",
        "* And then the three models named Logistic regression, Decision Tree Model and Random Forest model were used to build the model with the help of scikit library.\n",
        "* And after evaluating those three models by comparing the actual final values to the values predicted by models to get accuary which enhance the efficiency of the model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UBxNodiV0KAs"
      },
      "source": [
        ""
      ]
    }
  ]
}